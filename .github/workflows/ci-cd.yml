name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-contracts:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config

      - name: Install Scarb
        run: curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh

      - name: Add Scarb to PATH
        run: echo "${HOME}/.local/share/scarb/bin" >> $GITHUB_PATH

      # Cache Rust toolchain and dependencies
      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown
          profile: minimal

      - name: Cache snforge
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/snforge
          key: ${{ runner.os }}-snforge-0.33.0
        
      - name: Install snforge
        run: |
          if ! command -v snforge &> /dev/null; then
            cargo install --locked --git https://github.com/foundry-rs/starknet-foundry \
              --tag v0.33.0 \
              --bin snforge \
              --features=rust-serde
          fi
          echo "Installed snforge version: $(snforge --version)"
          
      - name: Install dependencies
        run: scarb clean && scarb fetch

      - name: Build Starknet contracts
        run: scarb build

      - name: Run snforge tests
        run: snforge test --workspace       

  nextjs-build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build
        env:  # Proper indentation here
          NEXT_PUBLIC_API_URL: ${{ github.event_name == 'pull_request' && 'dummy-api-url' || secrets.NEXT_PUBLIC_API_URL }}
          OPENAI_API_KEY: ${{ github.event_name == 'pull_request' && 'dummy-key' || secrets.OPENAI_API_KEY }}
          BRIAN_API_KEY: ${{ github.event_name == 'pull_request' && 'dummy-key' || secrets.BRIAN_API_KEY }}

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            client/.next/cache
            ${{ github.workspace }}/client/.next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('client/package-lock.json') }}-${{ hashFiles('client/**.[jt]sx?') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('client/package-lock.json') }}-

  deploy:
    needs: [check-contracts, nextjs-build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./client

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BRIAN_API_KEY: ${{ secrets.BRIAN_API_KEY }}
